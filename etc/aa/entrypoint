#!/bin/bash
set -e

. /etc/aa/entrypointbase

Cnf='/etc/aa/my.cnf'
Timezone=${Timezone:-''}
Host=${Host:-'mysqldocker'}
LogTag=${LogTag:-"mysqlent[$$]"}

MysqlDatabases=${MysqlDatabases:-''}
MysqlRootAuthPlugin=${MysqlRootAuthPlugin:-''}
MysqlRootBindAddress=${MysqlRootBindAddress:-'%'}
MysqlRootPassword=${MysqlRootPassword:-''}
MysqlMasterRepAuthPlugin=${MysqlMasterRepAuthPlugin:-''}
MysqlAdminAuthPlugin=${MysqlAdminAuthPlugin:-''}
MysqlRepAuthPlugin=${MysqlRepAuthPlugin:-''}

aaLog() {
    AaLog --aalogheader_host "${Host}" --aalogtag "${LogTag}" "$@"
}

AaAdjustTime "${Timezone}"


# 这个是必须要的，即使在CentOS7容器已经设置过权限了，但是这里重新挂载之后，就必须要设置修改权限
[ ! -d "/var/lib/dockervol/mysql-data" ] && mkdir -p "/var/lib/dockervol/mysql-data"
[ ! -d "/var/lib/dockervol/mysql-logbin" ] && mkdir -p "/var/lib/dockervol/mysql-logbin"
chown -R iwi:iwi /var/log/dockervol /var/lib/dockervol
chown iwi:iwi "$Cnf"
chmod 0444 "$Cnf"

setConfig() {
    local cnfLock="/etc/aa/lock/mysql.config.entlock"
    if [ ! -f "$cnfLock" ]; then
        local conf="$Cnf"
        [ ! -f "$conf" ] && echo -e "[mysqld]\nserver-id=1" > "$conf"
        aaLog "Configuration file: $conf"
        if [ ! -z "${MysqlServerID}" ]; then
            aaLog "my.cnf server-id=${MysqlServerID}"
            sed -Ei "s/^(server-id)[\s=]*.+$/server-id=${MysqlServerID}/" "$conf"
        fi
        if [ ! -z "${MysqlBinlogIgnoreDatabases}" ]; then
            sed -Ei "s/^\s*(binlog-ignore-db|binlog-do-db)/#&/" $conf
            if [ "${MysqlBinlogIgnoreDatabases}" != '*' ]; then
                echo "binlog-ignore-db=${MysqlBinlogIgnoreDatabases}" >> $conf
                #for db in $(echo "${MysqlBinlogIgnoreDatabases}" | tr ',' "\n"); do
                #    aaLog "my.cnf binlog-ignore-db=$db"
                #    echo '' >> $conf
                #    echo "binlog-ignore-db=$db" >> $conf
                #done
            fi
        fi

        if [ ! -z "${MysqlReplicateIgnoreDatabases}" ]; then
            sed -Ei "s/^\s*(replicate-ignore-db|replicate-binlog-do-db)/#&/" $conf
            if [ "${MysqlReplicateIgnoreDatabases}" != '*' ]; then
                echo "replicate-ignore-db=${MysqlReplicateIgnoreDatabases}" >> $conf
            fi
        fi

        if [ ! -z "${MysqlBinlogSlaveUpdates}" ]; then
            sed -Ei "s/^\s*binlog-slave-updates/#&/" $conf
            local bsu=echo ${MysqlBinlogSlaveUpdates} | awk '{print tolower($0)}'
            if [ "$bsu" == 'on' -o "$bsu" == 'true' -o "$bsu" == '1' ]; then
                echo "binlog-slave-updates=ON" >> $conf
            fi
        fi

        touch $cnfLock
    fi
}

# Fetch value from server config
# We use mysqld --verbose --help instead of my_print_defaults because the
# latter only show values present in config files, and not server defaults
getConfig() {
	local conf="$1"; shift
	"$@" --verbose --help --log-bin-index="$(mktemp -u)" 2>/dev/null \
		| awk '$1 == "'"$conf"'" && /^[^ \t]/ { sub(/^[^ \t]+[ \t]+/, ""); print; exit }'
	# match "datadir      /some/path with/spaces in/it here" but not "--xyz=abc\n     datadir (xyz)"
}


createDatabases(){
	local mysql=$1
    local dbs
    local db
	if [ ! -z "${MysqlDatabases}" ]; then
		dbs=$(echo "${MysqlDatabases}" | tr ',' "\n")
		aaLog "Creating schemas: $dbs"
		# for i in 100 200 300; do 
		# for i in "100 200 300"; do    error!!!
		for db in $dbs; do
			aaLog "Creating schema $db"
			echo "CREATE SCHEMA IF NOT EXISTS $db CHARACTER SET utf8mb4;" | "${mysql[@]}"
			aaLog "schemas $db created"
		done
	fi
}



grantPrivileges(){
    local mysql=$1
    local priv
    local tables
    local ua
    local user
    local addr
    local authPlugin
    local password
    local sql

    for p in ${MysqlPrivileges//;;;/ }; do
      echo "[privilege] ${p}"
        priv=$(echo $p | awk -F ':::' '{print $1;}')
        priv=${priv//+/ }
        tables=$(echo $p | awk -F ':::' '{print $2;}')
        ua=$(echo $p | awk -F ':::' '{print $3;}')
        user=${ua%%@*}
        addr=${ua##*@}
        authPlugin=$(echo $p | awk -F ':::' '{print $4;}')
        password=$(echo $p | awk -F ':::' '{print $5;}')

        if [ -n "$authPlugin" ]; then
            authPlugin='WITH '$authPlugin
        fi

        schema=$(echo $tables | awk -F '.' '{print $1;}')
        tbs=$(echo $tables | awk -F '.' '{print $2;}')
        if [ -z "$tbs" ]; then
          tbs="*"
        fi
        if [[ "$schema" != "*" && ${schema:0:1} != "\`" ]]; then
          schema="\`${schema}\`"
        fi
        if [[ "$tbs" != "*" && ${tbs:0:1} != "\`" ]]; then
            tbs="\`${tbs}\`"
        fi

        # GRANT select,insert,update ON *.* TO 'iwi'@'%' IDENTIFIED WITH mysql_native_password BY 'password' ;
        # @'%' 不包括 @'localhost'  ，但是包括 @'127.0.0.1' 如果需要用localhost访问，则再增加一个授权

         # grant privileges 时候要求进入某个库后再执行；因此需要先执行 use mysql;

        "${mysql[@]}" <<-EOSQL
        SET @@SESSION.SQL_LOG_BIN=0;
        CREATE USER IF NOT EXISTS '${user}'@'${addr}' IDENTIFIED ${authPlugin} BY '${password}' ;
        ALTER USER '${user}'@'${addr}' IDENTIFIED ${authPlugin} BY '${password}' ;
        USE mysql;
        GRANT ${priv} ON ${schema}.${tbs} TO '${user}'@'${addr}' WITH GRANT OPTION ;
EOSQL

    done
}

 	
# 如果挂载的数据里面已经有 mysql 文件夹，那么就表示已经有数据了。否则就需要重新创建数据
if [ ! -d "/var/lib/dockervol/mysql-data/mysql" ]; then
    if [ -z "${MysqlRootPassword}" -a -z "${MysqlAllowEmptyPassword}" ]; then
        aaLog --aalogpri_severity ERROR 'database is uninitialized and MysqlRootPassword not set'
        aaLog '  Did you forget to add -e MysqlRootPassword=... ?'
        exit 1
    fi

    aaLog "$@ --initialize-insecure --datadir=/var/lib/dockervol/mysql-data --user=iwi"
    "$@" --initialize-insecure --datadir=/var/lib/dockervol/mysql-data --user=iwi
    aaLog 'Database initialized'

    if command -v /usr/local/bin/mysql_ssl_rsa_setup > /dev/null && [ ! -e "/var/lib/dockervol/mysql-data/server-key.pem" ]; then
        aaLog 'Initializing certificates'
        /usr/local/bin/mysql_ssl_rsa_setup --datadir="/var/lib/dockervol/mysql-data"
        aaLog 'Certificates initialized'
    fi

    socket="$(getConfig 'socket' "$@")"
    "$@" --skip-networking --socket="${socket}" &
    declare pid="$!"
    
    aaLog "Running $@ --skip-networking & : pid=$pid"
    
    ps aux 
    
    aaLog "Running /usr/local/bin/mysql --protocol=socket -uroot  -hlocalhost --socket=${socket}"
    declare mysql=( /usr/local/bin/mysql --protocol=socket -uroot -hlocalhost --socket="${socket}" )
    
    aaLog 'MySQL first init process in progress...'
    declare is_mysql_running=0
    declare i
    for i in {30..0}; do
            if echo 'SELECT 1;' | "${mysql[@]}" &> /dev/null; then
            is_mysql_running=1
            break
        fi
        aaLog $i' MySQL init sleep 1'
        sleep 1
    done
    aaLog "MySQL first initialiation has been initialized "$[30-i]" times"
    if [ $is_mysql_running -eq 0 ]; then
        aaLog --aalogpri $[16*8+3] 'MySQL init process failed.'
        rm -rf "/var/lib/dockervol/mysql-data"
        exit 1
    fi
            
    if [ -z "$MysqlInitdbSkipTzinfo" ]; then
        # sed is for https://bugs.mysql.com/bug.php?id=20545
        /usr/local/bin/mysql_tzinfo_to_sql /usr/share/zoneinfo | sed 's/Local time zone must be set--see zic manual page/FCTY/' | "${mysql[@]}" mysql
    fi
    

    createDatabases mysql
    grantPrivileges mysql


    declare root_auth_plugin
    if [ ! -z "$MysqlRootAuthPlugin" ]; then
        root_auth_plugin='WITH '$MysqlRootAuthPlugin
    fi

    declare root_create
    # default root to listen for connections from anywhere
    if [ ! -z "$MysqlRootBindAddress" -a "$MysqlRootBindAddress" != 'localhost' ]; then
        # no, we don't care if read finds a terminating character in this heredoc
        # https://unix.stackexchange.com/questions/265149/why-is-set-o-errexit-breaking-this-read-heredoc-expression/265151#265151
         # grant privileges 时候要求进入某个库后再执行；因此需要先执行 use mysql;

        read -r -d '' root_create <<-EOSQL || true
            CREATE USER 'root'@'${MysqlRootBindAddress}' IDENTIFIED ${root_auth_plugin} BY '${MysqlRootPassword}' ;
            ALTER USER 'root'@'${MysqlRootBindAddress}' IDENTIFIED ${root_auth_plugin} BY '${MysqlRootPassword}' ;
            USE mysql ;
            GRANT ALL ON *.* TO 'root'@'${MysqlRootBindAddress}' WITH GRANT OPTION ;
EOSQL
    fi

    aaLog "Changing Root Password"
     # grant privileges 时候要求进入某个库后再执行；因此需要先执行 use mysql;

    "${mysql[@]}" <<-EOSQL
        -- What's done in this file shouldn't be replicated
        --  or products like mysql-fabric won't work
        SET @@SESSION.SQL_LOG_BIN=0;
        -- DELETE FROM mysql.user ;
        DROP USER 'root'@'localhost' ;
        CREATE USER IF NOT EXISTS 'root'@'localhost' IDENTIFIED ${root_auth_plugin} BY '${MysqlRootPassword}' ;
        ALTER USER 'root'@'localhost' IDENTIFIED ${root_auth_plugin} BY '${MysqlRootPassword}' ;
        USE mysql ;
        GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION ;
        ${root_create}
        DROP DATABASE IF EXISTS test ;
        FLUSH PRIVILEGES ;
EOSQL
    aaLog "Root Password changed"
    
    # -pPASSWORD     there should be no space between `-p` and `password`
    mysql+=( -p"${MysqlRootPassword}" )


    ######### Setting initialiation configurations with another mysql deamon process
    if ! kill -s TERM "$pid" || ! wait "$pid"; then
        #echo >&2 'MySQL init process failed.'
        aaLog --aalogpri $[16*8+3] 'MySQL init process failed.'
        rm -rf "/var/lib/dockervol/mysql-data"
        exit 1
    fi
    
    if [ ! -z "${MysqlRootPassword}" ]; then
        
        aaLog "Initializing Start Up Process..."
        # Run in background
        "$@" --skip-networking &
        
        pid="$!"
        
        aaLog "Running mysqld with pid=$pid : Setting MysqlRootPassword"
        
        mysql=( /usr/local/bin/mysql --protocol=socket -uroot -p"${MysqlRootPassword}" )
        
        is_mysql_running=0
        for i in {30..0}; do
            aaLog 'MySQL (with root password) init process in progress...'
            if echo 'SELECT 1;' | "${mysql[@]}" &> /dev/null; then
                is_mysql_running=1
                break
            fi
            aaLog 'MySQL init sleep 1'
            sleep 1
        done
        aaLog "MySQL (with root password) has been initialized "$[30-i]" times"
        if [ $is_mysql_running -eq 0 ]; then
            aaLog --aalogpri $[16*8+3] 'MySQL init process failed.'
            rm -rf "/var/lib/dockervol/mysql-data"
            exit 1
        fi
        
        aaLog "Setting slave's configs with another mysql deamon process"
        if ! kill -s TERM "$pid" || ! wait "$pid"; then
            aaLog --aalogpri $[16*8+3] "Fail to kill MySQL pid=$pid... : After Granting Slave Server"
            exit 1
        fi
        
        
        if [ ! -z "${MysqlMaster}" -a ! -z "${MysqlMasterRepUser}" -a ! -z "${MysqlMasterRepPassword}" ]; then
            aaLog "Setting Master Server..."
            # Run in background
            "$@" --skip-networking &
            
            pid="$!"
            
            aaLog " Running mysqld with pid=$pid : Setting Master Server"
            
            master_host=$(echo "${MysqlMaster}" | awk -F ':' '{print $1}')
            master_port=$(echo "${MysqlMaster}" | awk -F ':' '{print $2}')
            master_port=${master_port:-'3306'}
            is_master_alive=0
            # Try to connect to master mysql server within 30 times (1 sec each time)
            for i in {30..0}; do
                aaLog "($i) : Connecting to Master Server ${MysqlMasterRepUser}@${MysqlMaster} ..."
                
                # -h127.0.0.3 -P3306 will connect to current server, not the master one
                #   Please connect to its master's link name (e.g aa_mysql)
                mysql_master=( /usr/local/bin/mysql -h"$master_host" -P"$master_port" -u"${MysqlMasterRepUser}" -p"${MysqlMasterRepPassword}")
                if echo 'SELECT 1' | "${mysql_master[@]}" &> /dev/null; then
                    is_master_alive=1
                    aaLog " Connected to MySQL Master Server"
                    break
                fi
                
                sleep 1
            done
                
            if [ $is_master_alive -eq 0 ]; then
                aaLog --aalogpri $[16*8+3] ' Master Server: ${MysqlMaster} is not alive ...'
                rm -rf "/var/lib/dockervol/mysql-data"
                exit 1
            fi
            
            mysql=( /usr/local/bin/mysql --protocol=socket -uroot -p"${MysqlRootPassword}" )
            is_slave_alive=0
            for i in {30..0}; do
                aaLog 'MySQL slave init process in progress...'
                if echo 'SELECT 1;' | "${mysql[@]}" &> /dev/null; then
                    is_slave_alive=1
                    aaLog " Connected to MySQL Slave Server"
                    break
                fi
                sleep 1
            done
            
            if [ $is_slave_alive -eq 0 ]; then
                aaLog --aalogpri $[16*8+3] 'MySQL slave init failure'
                rm -rf "/var/lib/dockervol/mysql-data"
                exit 1
            fi
            
            aaLog " stop slave ..."
            echo "stop slave;" | "${mysql[@]}"
            
            aaLog " reset slave ..."
            echo "reset slave;" | "${mysql[@]}"
            
            aaLog " CHANGE MASTER TO MASTER_HOST='$master_host', MASTER_PORT=$master_port, MASTER_USER='${MysqlMasterRepUser}', MASTER_PASSWORD='${MysqlMasterRepPassword}', MASTER_AUTO_POSITION = 1;"
            
            echo "CHANGE MASTER TO MASTER_HOST='$master_host', MASTER_PORT=$master_port, MASTER_USER='${MysqlMasterRepUser}', MASTER_PASSWORD='${MysqlMasterRepPassword}', MASTER_AUTO_POSITION = 1;" | "${mysql[@]}"
            
            aaLog " start slave"
            echo "start slave;" | "${mysql[@]}"
            
            if ! kill -s TERM "$pid" || ! wait "$pid" ; then
                aaLog --aalogpri $[16*8+3] 'Fail to kill MySQL pid=$pid... : After Setting Master Server'
                rm -rf "/var/lib/dockervol/mysql-data"
                exit 1
            fi
        fi
        aaLog 'MySQL start up process init step done. Ready to start up.'
    fi
    
    aaLog 'MySQL init process done. Ready to start up.'
fi

setConfig
 

[ -f "/etc/aa/lock/mysqld.sock" ] && rm -f "/etc/aa/lock/mysqld.sock"
[ -f "/etc/aa/lock/mysqld.sock.lock" ] && rm -f "/etc/aa/lock/mysqld.sock.lock"

RunningSignal ${RunningID:-''}

su - iwi << EOF
	$@
EOF